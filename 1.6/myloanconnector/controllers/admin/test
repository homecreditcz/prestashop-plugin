    private function updateProductData($id_product, $data){

        // Pokud zatím neexistuje, vlož
        if($this->allProductsData[$id_product]['data'] === "empty"){

            return Db::getInstance()->insert('hc_product', array(
              'id_product' => (int)$id_product,
              'data'      => $data,
            ));

        } else {
            // Aktualizovat data

            return Db::getInstance()->update('hc_product', array(
              'data'      => $data,
            ), "id_product = $id_product");

        }
    }

    private function prepareArrayKeys(&$array){
        $array = array_reduce($array, function($reduced, $current) {
            $reduced[$current['id_product']] = $current;
            return $reduced;
        });

        return $array;
}

    private function getAllProductsData(){

        $page = (int)Tools::getValue('page', 1);
        $selected_pagination = (int)Tools::getValue('selected_pagination', 50);

        $id_lang=(int)Context::getContext()->language->id;
        $start = ($page - 1) * $selected_pagination;
        $limit = $page * $selected_pagination;
        $order_by = bqSQL(Tools::getValue($this->name."Orderby", 'id_product'));
        $order_way = bqSQL(Tools::getValue($this->name."Orderway", 'DESC'));
        $filter_name = bqSQL(Tools::getValue($this->name."Filter_name", ''));
        $filter_id = bqSQL(Tools::getValue($this->name."Filter_id", ''));

        if($filter_name)
            $filter_name = "AND pl.name LIKE '%$filter_name%'";

        if($filter_id)
            $filter_id = "AND p.id_product = '$filter_id'";

        $sql = 'SELECT pl.name, p.id_product, IFNULL(h.`data`, "empty") as `data`
				FROM `'._DB_PREFIX_.'product` p
				    LEFT JOIN `ps161_product_lang` pl ON (p.`id_product` = pl.`id_product`  AND pl.id_shop = 1 )
            LEFT JOIN `'._DB_PREFIX_.'hc_product` h ON (h.`product_id` = p.`id_product`)
            WHERE pl.`id_lang` = ' . $id_lang .' '. $filter_name .' '. $filter_id .'
            ORDER BY '.$order_by.' '.$order_way.' LIMIT '.$start.','.$limit;

        var_dump($sql);
        if ($products = Db::getInstance()->ExecuteS($sql)){
            $this->prepareArrayKeys($products);
        }

        $this->allProductsData = $products;

        $sql = 'SELECT COUNT(*) FROM '._DB_PREFIX_.'product';
        $this->productsCount = Db::getInstance()->getValue($sql);

        return $products;
    }

    public function displayActionLink($state, $product)
    {
        $id = $product['product_id'];
        $state = $product['data'];
        $newState = 0;

        if($product['data'] === "empty" || (int)$product['data'] === 0) {

            $type = "success";
            $text = $this->l('Activate');
            $newState = 1;

        } else {

            $type = "danger";
            $text = $this->l('Deactivate');

        }

        $link = self::$currentIndex . '&token=' . $this->token . '&discount='. $newState .'&id=' . $id ;

        return '<span class="btn-group-action">
                <span class="btn-group">
                  <a class="btn btn-'. $type .'" href="'. $link .'">' . $text . '
                    </a>
                </span>
            </span>';

    }

    public function postProcess()
    {
        parent::postProcess();

        if(
          Tools::getValue('id', null) !== null &&
          Tools::getValue('discount', null) !== null
        )
        {
            $this->updateProductData(Tools::getValue('id'), Tools::getValue('discount'));
            $this->allProductsData = $this->getAllProductsData();
        }
    }

    public function prepareTable(){
        $list = new HelperList();

        $list->shopLinkType = '';

        $list->identifier = 'id_product';
        $list->title = $this->l('Products with discount calculator');
        $list->token = Tools::getAdminTokenLite($this->controller_name);
        $list->currentIndex = AdminController::$currentIndex.'&configure='.$this->name;
        $list->listTotal = $this->productsCount;
        $list->_pagination = array(5, 10, 100);

        $list->table = "hc_products";

        $this->actions = array('enable');
        $this->addRowAction('enable');

        $list->table = $this->name;

        return $list;
    }

        public function initContent()
        {
            parent::initContent();

           /* $this->context->smarty->assign(
              array(
                "table" => "asdsd"
              )
            );

            $this->setTemplate('products.tpl');*/

        }
